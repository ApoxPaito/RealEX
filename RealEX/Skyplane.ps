////////////////////////////////////////////////////////////////////////////////
// Filename: skyplane.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D firstCloudTexture : register(t0);
Texture2D secondCloudTexture : register(t1);
Texture2D perturbTexture : register(t2);
SamplerState SampleType;

cbuffer SkyBuffer
{
    float firstTranslation;
    float secondTranslation;
    float brightness;
    float scale;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 SkyPlanePixelShader(PixelInputType input) : SV_TARGET
{
    float2 sampleLocation;
    float4 perturbValue;
    float4 firstColor;
    float4 secondColor;

    // Translate the texture coordinate sampling location by the first translation value.
    sampleLocation.x = input.tex.x + firstTranslation;
    sampleLocation.y = input.tex.y;

    // Sample the texture value from the perturb texture using the translated texture coordinates.
    perturbValue = perturbTexture.Sample(SampleType, sampleLocation);

    // Multiply the perturb value by the perturb scale.
    perturbValue = perturbValue * scale;

    // Add the texture coordinates as well as the translation value to get the perturbed texture coordinate sampling location.
    perturbValue.xy = perturbValue.xy + sampleLocation + firstTranslation;

    // Now sample the color from the cloud texture using the perturbed sampling coordinates.
    firstColor = firstCloudTexture.Sample(SampleType, perturbValue.xy);

    // Translate the texture coordinate sampling location by the second translation value.
    sampleLocation.x = input.tex.x + secondTranslation;
    sampleLocation.y = input.tex.y;

    // Sample the texture value from the perturb texture using the translated texture coordinates.
    perturbValue = perturbTexture.Sample(SampleType, sampleLocation);

    // Multiply the perturb value by the perturb scale.
    perturbValue = perturbValue * scale;

    // Add the texture coordinates as well as the translation value to get the perturbed texture coordinate sampling location.
    perturbValue.xy = perturbValue.xy + sampleLocation + secondTranslation;

    // Now sample the color from the cloud texture using the perturbed sampling coordinates.
    secondColor = secondCloudTexture.Sample(SampleType, perturbValue.xy);

    // Combine the two cloud textures evenly.
    firstColor = lerp(firstColor, secondColor, 0.5f);

    // Reduce the color cloud by the brightness value.
    firstColor = firstColor * brightness;

    return firstColor;
}